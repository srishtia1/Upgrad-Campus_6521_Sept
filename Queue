Q1. Write a Java program to implement a queue using two stacks.
A. import java.util.Stack;

public class QueueUsingTwoStacks {
    Stack<Integer> stack1;
    Stack<Integer> stack2;

    public QueueUsingTwoStacks() {
        stack1 = new Stack<>();
        stack2 = new Stack<>();
    }

    public void enqueue(int x) {
        stack1.push(x);
    }

    public int dequeue() {
        if (stack2.isEmpty()) {
            if (stack1.isEmpty()) {
                throw new IllegalStateException("Queue is empty");
            }
            while (!stack1.isEmpty()) {
                stack2.push(stack1.pop());
            }
        }
        return stack2.pop();
    }

    public int front() {
        if (stack2.isEmpty()) {
            if (stack1.isEmpty()) {
                throw new IllegalStateException("Queue is empty");
            }
            while (!stack1.isEmpty()) {
                stack2.push(stack1.pop());
            }
        }
        return stack2.peek();
    }

    public static void main(String[] args) {
        QueueUsingTwoStacks queue = new QueueUsingTwoStacks();
        queue.enqueue(1);
        queue.enqueue(2);
        System.out.println("Front element: " + queue.front());
        System.out.println("Dequeue: " + queue.dequeue());
        System.out.println("Front element after dequeue: " + queue.front());
    }
}

Q2.Write a Java program to implement a circular queue.
A.public class CircularQueue {
    int[] queue;
    int front, rear, size, capacity;

    public CircularQueue(int capacity) {
        this.capacity = capacity;
        queue = new int[capacity];
        front = rear = size = 0;
    }

    public void enqueue(int x) {
        if (isFull()) {
            throw new IllegalStateException("Queue is full");
        }
        queue[rear] = x;
        rear = (rear + 1) % capacity;
        size++;
    }

    public int dequeue() {
        if (isEmpty()) {
            throw new IllegalStateException("Queue is empty");
        }
        int element = queue[front];
        front = (front + 1) % capacity;
        size--;
        return element;
    }

    public int front() {
        if (isEmpty()) {
            throw new IllegalStateException("Queue is empty");
        }
        return queue[front];
    }

    public boolean isEmpty() {
        return size == 0;
    }

    public boolean isFull() {
        return size == capacity;
    }

    public static void main(String[] args) {
        CircularQueue circularQueue = new CircularQueue(3);
        circularQueue.enqueue(1);
        circularQueue.enqueue(2);
        System.out.println("Front element: " + circularQueue.front());
        System.out.println("Dequeue: " + circularQueue.dequeue());
        System.out.println("Front element after dequeue: " + circularQueue.front());
    }
}

Q3.Write a Java program to reverse the first K elements of a queue.
A.import java.util.LinkedList;
import java.util.Queue;
import java.util.Stack;

public class ReverseFirstKElements {
    public static Queue<Integer> reverseFirstK(Queue<Integer> queue, int k) {
        if (queue == null || k <= 0 || k > queue.size()) {
            throw new IllegalArgumentException("Invalid input");
        }

        Stack<Integer> stack = new Stack<>();
        for (int i = 0; i < k; i++) {
            stack.push(queue.poll());
        }

        while (!stack.isEmpty()) {
            queue.offer(stack.pop());
        }

        for (int i = 0; i < queue.size() - k; i++) {
            queue.offer(queue.poll());
        }

        return queue;
    }

    public static void main(String[] args) {
        Queue<Integer> queue = new LinkedList<>();
        queue.offer(1);
        queue.offer(2);
        queue.offer(3);
        queue.offer(4);
        queue.offer(5);

        int k = 3;

        System.out.println("Original Queue: " + queue);
        Queue<Integer> reversedQueue = reverseFirstK(queue, k);
        System.out.println("Queue after reversing first " + k + " elements: " + reversedQueue);
    }
}
Q4.Write a Java program to generate binary numbers from 1 to N using a queue.
A.import java.util.LinkedList;
import java.util.Queue;

public class GenerateBinaryNumbers {
    public static void generateBinaryNumbers(int n) {
        if (n <= 0) {
            return;
        }

        Queue<String> queue = new LinkedList<>();
        queue.offer("1");

        for (int i = 1; i <= n; i++) {
            String current = queue.poll();
            System.out.println(current);

            queue.offer(current + "0");
            queue.offer(current + "1");
        }
    }

    public static void main(String[] args) {
        int n = 5;
        System.out.println("Binary numbers from 1 to " + n + ":");
        generateBinaryNumbers(n);
    }
}

Q5.Write a Java program to implement a queue using two stacks efficiently.
A. import java.util.Stack;

public class QueueUsingTwoStacksEfficient {
    Stack<Integer> stack1;
    Stack<Integer> stack2;

    public QueueUsingTwoStacksEfficient() {
        stack1 = new Stack<>();
        stack2 = new Stack<>();
    }

    public void enqueue(int x) {
        while (!stack1.isEmpty()) {
            stack2.push(stack1.pop());
        }
        stack1.push(x);
        while (!stack2.isEmpty()) {
            stack1.push(stack2.pop());
        }
    }

    public int dequeue() {
        if (isEmpty()) {
            throw new IllegalStateException("Queue is empty");
        }
        return stack1.pop();
    }

    public int front() {
        if (isEmpty()) {
            throw new IllegalStateException("Queue is empty");
        }
        return stack1.peek();
    }

    public boolean isEmpty() {
        return stack1.isEmpty();
    }

    public static void main(String[] args) {
        QueueUsingTwoStacksEfficient queue = new QueueUsingTwoStacksEfficient();
        queue.enqueue(1);
        queue.enqueue(2);
        System.out.println("Front element: " + queue.front());
        System.out.println("Dequeue: " + queue.dequeue());
        System.out.println("Front element after dequeue: " + queue.front());
    }
}
